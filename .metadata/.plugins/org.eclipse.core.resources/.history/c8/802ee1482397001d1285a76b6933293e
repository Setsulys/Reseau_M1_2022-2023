package fr.uge.ex2;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.TimeUnit;

public class ClientUpperCaseUDPTimeout {
	public static final int BUFFER_SIZE = 1024;
	public static final int TIMEOUT = 1000;

	private static void usage() {
		System.out.println("Usage : NetcatUDP host port charset");
	}

	private static void timeout() {
		System.out.println("Le serveur n'a pas r√©pondu");
	}

	public static void main(String[] args) throws IOException {
    	
    	
    	var server = new InetSocketAddress(args[0], Integer.parseInt(args[1]));
        var cs = Charset.forName(args[2]);
        DatagramChannel dc = DatagramChannel.open();
        dc.bind(null);
        
    	var queue = new ArrayBlockingQueue<String>(10);
        if (args.length != 3) {
            usage();
            return;
        }
 
        Thread.ofPlatform().start(() -> {
        	String msg;
            while (!Thread.interrupted()) {
                try (var scanner = new Scanner(System.in);){
                	var buffer = ByteBuffer.allocate(BUFFER_SIZE);
                    while (scanner.hasNextLine()) {
                        var line = scanner.nextLine();

                    	buffer = cs.encode(line);
	                    dc.send(buffer, server);
	                    msg = queue.poll(TIMEOUT,TimeUnit.MILLISECONDS);
	                    if(msg == null) {
	                    	timeout();
	                    	continue;
	                    }
//	                    buffer.flip();
//	                    System.out.println("Received " + buffer.remaining() );
//	                    System.out.println("String : " + msg);
//	                    buffer.flip();
	                    buffer.clear();
                    }
                }catch(IOException | InterruptedException e) {
                   return;
                }
            }
        });

        Thread.ofPlatform().start(() -> {
            while (!Thread.interrupted()) {
                try {
                    var buffer2 = ByteBuffer.allocate(BUFFER_SIZE);
                    
                    dc.receive(buffer2);
                    buffer2.flip();
                    System.out.println("Received " + buffer2.remaining() );
                    var s= cs.decode(buffer2).toString();
                    System.out.println("String : " + s);            
                    queue.put(s);
                    buffer2.clear();
                } catch (InterruptedException | IOException e) {
                    return;
                }
            }
        });
        
    }
}

